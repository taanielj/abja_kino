version: "3.8"

services:
  abja-postgres:
    container_name: abja-postgres
    image: postgres:16.0
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./abja_kino_back/database/:/docker-entrypoint-initdb.d/
    networks:
      - abja-kino-internal


  abja-kino-back:
    container_name: abja-kino-back
    build: ./abja_kino_back
    environment:
      # Spring
      SPRING_DATASOURCE_URL: jdbc:postgresql://abja-postgres:5432/${POSTGRES_DATABASE}
      SPRING_ADMIN_USERNAME: ${SPRING_ADMIN_USERNAME}
      SPRING_ADMIN_PASSWORD: ${SPRING_ADMIN_PASSWORD}
      SPRING_ADMIN_EMAIL: ${SPRING_ADMIN_EMAIL}
      SPRING_JWT_SECRET: ${SPRING_JWT_SECRET}

      # Postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
    depends_on:
      - abja-postgres
    ports:
      - "8080:8080"
    networks:
      - abja-kino-internal

  abja-kino-front:
    container_name: abja-kino-front
    build: ./abja_kino_front
    environment:
      - API_URL=${API_URL:-http://abja-kino-back:8080}
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "8081:8081"
    volumes:
      - ./abja_kino_front:/app # Mount the entire app directory
      - /app/node_modules # Exclude node_modules to use the container's version
    depends_on:
      - abja-kino-back
    networks: 
      - abja-kino-internal

  nginx:
    image: nginx:1.25
    container_name: nginx-reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - abja-kino-front
    networks:
      - abja-kino-internal
      - abja-kino-external

    


volumes:
  postgres-data:


networks:
  abja-kino-internal:
    internal: true
  abja-kino-external:


    
